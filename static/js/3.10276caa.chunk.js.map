{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","assets/images/DefaultPhoto.png","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","profileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","editButton","onClick","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","photoButton","target","files","length","initialValues","formData","then","Post","item","DefaultPhoto","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","posts","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postsElements","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.10276caa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__6RaZ2\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1B94w\",\"contact\":\"ProfileInfo_contact__joDzL\",\"profileData\":\"ProfileInfo_profileData__1SsZc\",\"photoButton\":\"ProfileInfo_photoButton__RAgzG\",\"editButton\":\"ProfileInfo_editButton__1rN61\",\"status\":\"ProfileInfo_status__NB5Ko\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__fcV4-\",\"posts\":\"MyPosts_posts__nFd1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Yw-X\"};","import React, {useState, useEffect} from 'react';\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status] );\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            { !editMode &&\n            <div>\n                <b>Status: </b> <span onDoubleClick={ activateEditMode }>{props.status || \"-------\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\n                       value={status} />\n            </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            { createField(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"UserPhoto\"/>\r\n               <div className={s.status}> <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/></div>\r\n                {isOwner && \r\n                <div className={s.photoButton}>\r\n                    <input type={\"file\"} onChange={onMainPhotoSelected}/>\r\n                    </div>}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div className={s.profileData}>\r\n        \r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n        {isOwner && <div className={s.editButton}><button onClick={goToEditMode}>edit</button></div>}\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","export default __webpack_public_path__ + \"static/media/DefaultPhoto.e6a97981.png\";","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport DefaultPhoto from './../../../../assets/images/DefaultPhoto.png'\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={DefaultPhoto} />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <div className={s.posts}>\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\r\n                   validate={[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n    </div>\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId ) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                    isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n"],"sourceRoot":""}